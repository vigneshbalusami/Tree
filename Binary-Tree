#include<stdio.h>
#include<stdlib.h>
int f=0;
struct node
{
int data;
int level;
struct node *left;
struct node *right;
}*root=NULL;
struct node * insert(int data,struct node *root,int level,int cur,int n)
{
if(level==cur&&root==NULL){
	root = (struct node *)malloc(sizeof(struct node));
	root->left=NULL;
	root->right=NULL;
	root->data=data;
f=1;
return root;
}
else if(root!=NULL){
	if(f==0)
 	root->left=insert(data,root->left,level,cur+1,0);
	if(f==0)
	root->right=insert(data,root->right,level,cur+1,1);
	}
return root;
}
void newnode(int data,struct node *root1)
{
	struct node *temp=root1,*t1=NULL;
	int level=0;
	f=0;
	while(temp!=NULL)
	{
		level++;
		t1=temp;
		temp=temp->left;
	}
if(root1==NULL)
{
root = (struct node *)malloc(sizeof(struct node));
	root->left=NULL;
	root->right=NULL;
	root->data=data;
}
	else{
		root=insert(data,root1,level-1,0,0);
if(f==0){
temp = (struct node *)malloc(sizeof(struct node));
	temp->left=NULL;
	temp->right=NULL;
	temp->data=data;
t1->left=temp;
}
}
}
void display(struct node *temp)
{
if(temp!=NULL)
{
	display(temp->left);
	printf("%d ",temp->data);
	display(temp->right);
}
}
void mirror(struct node *temp1,struct node *temp2){
    if(temp1!=NULL&&temp2!=NULL){
        if(temp1->data!=temp2->data)
            f=1;
        mirror(temp1->left,temp2->right);
        mirror(temp1->right,temp2->left);
    }
}
int main()
{
int i=0;
//for(i=0;i<20;i++)
newnode(0,root);
newnode(1 ,root);
newnode(1 ,root);
newnode(2 ,root);
newnode(3 ,root);
newnode(3 ,root);
newnode(2 ,root);

printf("\n");
display(root);
    f=0;
    mirror(root->left,root->right);
    printf("\n%d",f);
return 0;
}
